server




const express = require('express');
const vision = require('@google-cloud/vision');
const multer = require('multer');
const cors = require('cors');
require('dotenv').config();

const app = express();
const port = process.env.PORT || 5000;

// Initialize Vision API client with better error handling
let client;
try {
  client = new vision.ImageAnnotatorClient({ 
    keyFilename: './credentials/lankmarkscanner-9bad15c6146a.json' 
  });
  console.log('✅ Google Vision API client initialized successfully');
} catch (error) {
  console.error('❌ Failed to initialize Google Vision API client:', error.message);
  process.exit(1);
}

// Middleware
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// Configure multer for memory storage
const upload = multer({ 
  storage: multer.memoryStorage(),
  limits: { fileSize: 10 * 1024 * 1024 } // 10MB limit
});

app.get('/', (req, res) => {
  res.json({ 
    message: 'Landmark Recognition API is running!', 
    status: 'success',
    timestamp: new Date().toISOString()
  });
});

// Enhanced base64 endpoint with detailed logging
app.post('/detect-landmark-base64', async (req, res) => {
  try {
    console.log('📊 Processing base64 image for landmark detection');
    
    const { imageBase64 } = req.body;
    
    if (!imageBase64) {
      console.log('❌ No image data provided in request');
      return res.status(400).json({
        success: false,
        error: 'No image data provided'
      });
    }

    console.log('📝 Image data received, length:', imageBase64.length);
    
    // Remove data URL prefix if present
    const base64Data = imageBase64.replace(/^data:image\/[a-z]+;base64,/, '');
    console.log('🔧 Cleaned base64 data, length:', base64Data.length);
  
    
    const imageBuffer = Buffer.from(base64Data, 'base64');
    console.log('📦 Created image buffer, size:', imageBuffer.length, 'bytes');

    console.log('🔍 Calling Google Vision API...');
    
    // Call Google Vision API with timeout
    const [result] = await Promise.race([
      client.landmarkDetection({
        image: {
          content: imageBuffer
        }
      }),
      new Promise((_, reject) => 
        setTimeout(() => reject(new Error('API request timeout')), 30000)
      )
    ]);

    console.log('✅ Google Vision API call completed');
    console.log('📋 Full Vision API response:', JSON.stringify(result, null, 2));

    // Check for API errors
    if (result.error) {
      console.log('❌ Vision API returned an error:', result.error);
      return res.status(500).json({
        success: false,
        error: 'Vision API error',
        details: result.error.message || 'Unknown API error'
      });
    }

    const landmarks = result.landmarkAnnotations;
    console.log('🏛️ Landmarks found:', landmarks ? landmarks.length : 0);
    
    if (landmarks && landmarks.length > 0) {
      const topLandmark = landmarks[0];
      console.log(`🎯 Top landmark: ${topLandmark.description} (confidence: ${topLandmark.score || 'N/A'})`);
      
      // Log all detected landmarks for debugging
      landmarks.forEach((landmark, index) => {
        console.log(`   ${index + 1}. ${landmark.description} (score: ${landmark.score || 'N/A'})`);
      });
      
      res.json({
        success: true,
        landmark: {
          name: topLandmark.description,
          confidence: Math.round((topLandmark.score || 0.8) * 100),
          location: topLandmark.locations?.[0]?.latLng || null
        },
        allLandmarks: landmarks.map(l => ({
          name: l.description,
          confidence: Math.round((l.score || 0.8) * 100)
        }))
      });
    } else {
      console.log('🔍 No landmarks detected in the image');
      
      // Also try general object detection to see if image is valid
      try {
        const [objectResult] = await client.objectLocalization({
          image: { content: imageBuffer }
        });
        
        const objects = objectResult.localizedObjectAnnotations;
        console.log('📦 Objects detected for verification:', objects?.length || 0);
        
        res.json({
          success: false,
          error: 'No landmark detected',
          message: 'Image processed successfully but no landmarks found',
          imageValid: objects && objects.length > 0,
          detectedObjects: objects?.slice(0, 3).map(obj => obj.name) || []
        });
      } catch (objectError) {
        console.log('⚠️ Object detection also failed:', objectError.message);
        res.json({
          success: false,
          error: 'No landmark detected',
          message: 'No landmarks found in the image'
        });
      }
    }
    
  } catch (error) {
    console.error('❌ API Error:', error);
    console.error('Stack trace:', error.stack);
    
    res.status(500).json({
      success: false,
      error: 'Failed to analyze image',
      details: error.message,
      type: error.constructor.name
    });
  }
});

// Test endpoint with multiple test scenarios
app.post('/test-landmark', async (req, res) => {
  try {
    console.log('🧪 Testing landmark detection with multiple scenarios...');
    
    // Test 1: Simple geometric shape (should detect objects but no landmarks)
    const testResults = [];
    
    // Test with a simple test image first
    const simpleTestImage = '/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAyADIDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD3+iiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAP//Z';
    
    console.log('🔍 Testing basic image processing...');
    let imageBuffer = Buffer.from(simpleTestImage, 'base64');
    
    const [result] = await client.landmarkDetection({
      image: { content: imageBuffer }
    });
    
    console.log('📊 Basic test - Landmarks:', result.landmarkAnnotations?.length || 0);
    
    // Also test object detection to verify image processing
    const [objectResult] = await client.objectLocalization({
      image: { content: imageBuffer }
    });
    
    console.log('📦 Objects detected:', objectResult.localizedObjectAnnotations?.length || 0);
    
    // Test label detection to see what the API can recognize
    const [labelResult] = await client.labelDetection({
      image: { content: imageBuffer }
    });
    
    console.log('🏷️ Labels detected:', labelResult.labelAnnotations?.length || 0);
    if (labelResult.labelAnnotations) {
      labelResult.labelAnnotations.slice(0, 3).forEach(label => {
        console.log(`   - ${label.description}: ${Math.round(label.score * 100)}%`);
      });
    }
    
    res.json({
      success: true,
      message: 'Google Vision API is working correctly',
      apiStatus: 'functional',
      tests: {
        landmarkDetection: {
          processed: true,
          landmarksFound: result.landmarkAnnotations?.length || 0,
          landmarks: result.landmarkAnnotations || []
        },
        objectDetection: {
          processed: true,
          objectsFound: objectResult.localizedObjectAnnotations?.length || 0,
          objects: objectResult.localizedObjectAnnotations?.slice(0, 3).map(obj => obj.name) || []
        },
        labelDetection: {
          processed: true,
          labelsFound: labelResult.labelAnnotations?.length || 0,
          labels: labelResult.labelAnnotations?.slice(0, 5).map(label => ({
            name: label.description,
            confidence: Math.round(label.score * 100)
          })) || []
        }
      },
      recommendation: "Your API is working! Try testing with a clear photo of a famous landmark like Taj Mahal, Eiffel Tower, or Statue of Liberty."
    });
    
  } catch (error) {
    console.error('❌ Test Error:', error);
    res.status(500).json({
      success: false,
      error: 'Test failed',
      details: error.message
    });
  }
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ 
    status: 'healthy',
    service: 'landmark-detection-api',
    timestamp: new Date().toISOString(),
    visionApiStatus: client ? 'initialized' : 'not initialized'
  });
});

// Utility function to validate base64
function isValidBase64(str) {
  try {
    return btoa(atob(str)) === str;
  } catch (err) {
    // Try Node.js way
    try {
      return Buffer.from(str, 'base64').toString('base64') === str;
    } catch (e) {
      return false;
    }
  }
}

// Error handling middleware
app.use((err, req, res, next) => {
  console.error('🚨 Unhandled error:', err);
  res.status(500).json({
    success: false,
    error: 'Internal server error',
    details: err.message
  });
});

// Start server
app.listen(port, () => {
  console.log(`🚀 Server running on http://localhost:${port}`);
  console.log(`📍 Landmark detection endpoint: POST /detect-landmark-base64`);
  console.log(`🧪 Test endpoint: POST /test-landmark`);
  console.log(`💚 Health check: GET /health`);
});